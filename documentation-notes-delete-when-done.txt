https://help.github.com/categories/writing-on-github/

Collection Documentation
==========================
All Types of Collections
--------------------------------
If strict typing is not needed, then just use GenericCollection

Creating new Collections
--------------------------
argument unpacking via constructor (with array_values as a safegaurd)
or ::makeNew(array $items=[], $preserve_keys=true)

Implementing StrictlyTyped collections, Interface and Traits needed.

Talk about object property assignment and access via __get($key) && __set($key, $val)
Talk about array-style assignment [] / [$key] via offsetGet($key) && offsetSet($key, $val)

Dynamically Registering Methods
--------------------------------
    public static function addStaticMethod(
        $name, 
        callable $callable, 
        $has_return_val=false
    )
	
    public static function addMethodForAllInstances(
        $name, 
        callable $callable, 
        $has_return_val=false,
        $bind_to_this_on_invocation=true
    )

    public function addMethod(
        $name, 
        callable $callable, 
        $has_return_val=false,
        $bind_to_this=true
    )

	Method calls are serviced via __call($name, $arguments) 
	or __callStatic($name, $arguments)

Accessing / Extracting Items 
------------------------------
*- ->key or [$key]
*- column($column_key, $index_key=null)
*- everyNth($n, $position_of_first_nth_item = 0)
*- firstItem(), to get first item in the collections
*- lastItem(), to get last item in the collections
*- getCollectionsOfSizeN($max_size_of_each_collection=1) or yieldCollectionsOfSizeN($max_size_of_each_collection=1) see (split($numberOfGroups))
*- getIfExists($key, $default_value=null)
*- getKeys() & getItems()
*- getAndRemoveFirstItem()
*- getAndRemoveLastItem()
*- pull($key, $default = null)
*- randomKey() & randomKeys($number = 1)
*- randomItem() & randomItems($number = 1, $preserve_keys=false)
*- slice($offset, $length = null)
*- splice($offset, $length=null, array $replacement=[])
- split($numberOfGroups) (see getCollectionsOfSizeN($max_size_of_each_collection=1))
- take($limit)
- paginate($page_number, $num_items_per_page)


Adding Items to a Collection Object
------------------------------------
- ->key = $item or [] = $item or [$key] = $item
- appendCollection(CollectionInterface $other) & appendItem($item)
- mergeWith(array $items) & mergeMeWith(array $items)
- prependCollection(CollectionInterface $other) & prependItem($item, $key=null)
- push($item)
- put($key, $value)
- unionWith(array $items) & unionMeWith(array $items)


Modifying Items in a Collection Object
------------------------------------------
- setValForEachItem($field_name, $field_val, $add_field_if_not_present=false) //for Collection of Objects & / Arrays
- transform(callable $transformer, $bind_callback_to_this=true)

Deleting Items
---------------
- unset($coll->$key) or unset($coll[$key])
- removeAll(array $keys=[])
- refer to getAndRemoveFirstItem(), getAndRemoveLastItem() & pull($key, $default = null)

Finding Items in a Collection Object
------------------------------------------
- filterAll(callable $filterer, $copy_keys=false, $bind_callback_to_this=true, $remove_filtered_items=false)
- filterFirstN(callable $filterer, $max_number_of_filtered_items_to_return =null, $copy_keys=false, $bind_callback_to_this=true, $remove_filtered_items=false)
- containsItem($item)
- containsKey($key)
- containsItemWithKey($key, $item)
- containsItems(array $items)
- containsKeys(array $keys)
- getAllWhereKeysIn(array $keys)
- getAllWhereKeysNotIn(array $keys)
- searchByVal( $value, $strict = false )
- searchAllByVal( $value, $strict = false )
- searchByCallback(callable $callback, $bind_callback_to_this=true)

Iterating over / Looping through a Collection Object
-------------------------------------------------------
- each(callable $callback, $termination_value=false, $bind_callback_to_this=true)
- map(callable $callback, $preserve_keys = true, $bind_callback_to_this=true)
- getIterator()

Sorting Items in a Collection Object
------------------------------------------
- reverse() & reverseMe()
- shuffle($preserve_keys=true)

- sort(callable $callable=null, \VersatileCollections\SortType $type=null)
- sortMe(callable $callable=null, \VersatileCollections\SortType $type=null)

- sortDesc(callable $callable=null, \VersatileCollections\SortType $type=null)
- sortMeDesc(callable $callable=null, \VersatileCollections\SortType $type=null)

- sortByKey(callable $callable=null, \VersatileCollections\SortType $type=null)
- sortMeByKey(callable $callable=null, \VersatileCollections\SortType $type=null)

- sortDescByKey(callable $callable=null, \VersatileCollections\SortType $type=null)
- sortMeDescByKey(callable $callable=null, \VersatileCollections\SortType $type=null)

- sortByMultipleFields(\VersatileCollections\MultiSortParameters ...$param)
- sortMeByMultipleFields(\VersatileCollections\MultiSortParameters ...$param)


Other Operations on a Collection Object
------------------------------------------
- count()
- isEmpty()
- getAsNewType($new_collection_class=\VersatileCollections\GenericCollection::class)
- reduce(callable $reducer, $initial_value=NULL)
- reduceWithKeyAccess(callable $reducer, $initial_value=NULL)
- makeAllKeysNumeric($starting_key=0)
- pipeAndReturnCallbackResult(callable $callback)
- pipeAndReturnSelf(callable $callback)
- tap(callable $callback)
- toArray()
- unique()
- whenTrue( $truthy_value, callable $callback, callable $default=null )
- whenFalse( $falsy_value, callable $callback, callable $default=null )
- diff(array $items)
- diffUsing(array $items, callable $callback)
- diffAssoc(array $items)
- diffAssocUsing(array $items, callable $key_comparator)
- diffKeys(array $items)
- diffKeysUsing(array $items, callable $key_comparator)
- allSatisfyConditions(callable $callback, $bind_callback_to_this=true)
- intersectByKeys(array $arr)
- intersectByItems(array $arr)
- intersectByKeysAndItems(array $arr)
- intersectByKeysUsingCallback(array $arr, callable $key_comparator)
- intersectByItemsUsingCallback(array $arr, callable $item_comparator)
- intersectByKeysAndItemsUsingCallbacks(array $arr, callable $key_comparator=null, callable $item_comparator=null)



Strictly Typed Collections Documentation
================================================
Explain how to create custom Strictly Typed collection classes i.e. by implementing the 
appropriate interface and using the provided trait and option implementing
a variadic type hinted constructor.

- ArrayCollection

- CallablesCollection

- ObjectCollection
	- __call($method_name, $arguments) either calls dynamically registered method or executes method on each object with the return values returned in an array keyed by each corresponding object's key in the collection. For example, if you have a collection of new db records that have not been saved to the db, and you have a save method on the db record class that saves a record to the db and returns it's auto generated primary keys, you can use this method to save such record and receive all the new primary keys in the result.

- ResourceCollection

- ScalarCollection

	- uniqueNonStrict()
	
		+ NumericsCollection
			- average()
			- max()
			- median()
			- min()
			- mode()
			- product()
			- sum()
				+ FloatCollection
				+ IntCollection
				
		+ StringCollection

Create a laravel collections to versatile collections method equivalence table